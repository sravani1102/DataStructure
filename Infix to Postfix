#include<stdio.h>
#include<ctype.h>
#define MAX 20
char postfix[MAX],a[MAX];
int top=-1,j=0;
void push(char ch)
{
        a[++top]=ch;
}
char pop()
{
        return a[top--];

}
int priority(char ch)
{
        switch(ch)
        {
                case '^':return 3;
                case '*':
                case '/':
                case '%':return 2;
                case '+':
                case '-':return 1;
        }
        return 0;
}
void precedence(char ch)
{
        while(priority(ch)<=priority(a[top]))
        {
                postfix[j++]=pop();
        }
}
void main()
{
        char infix[MAX],ch,x;
        printf("Enter infix Expression\n");
        scanf("%s",infix);
        for(int i=0;infix[i]!='\0';i++)
        {
                ch=infix[i];
                if(isalpha(ch)||isdigit(ch))
                {
                        postfix[j++]=ch;
                }
                else
                {
                        switch(ch)
                        {
                                case '(':push(ch);
                                         break;
                                case '^':
                                case '*':
                                case '/':
                                case '%':
                                case '+':
                                case '-':precedence(ch);
                                         push(ch);
                                         break;
                                case ')':x=pop();
                                         while(x!='(')
                                         {
                                                postfix[j++]=x;
                                                x=pop();
                                         }
                                         break;
                        }
                }
        }
        while(top!=-1)
        {
            postfix[j++]=pop();
        }
        postfix[j]='\0';
        printf("Convert Infix to Postfix Expression is %s=%s",infix,postfix);
}
